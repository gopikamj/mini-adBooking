{"ast":null,"code":"// Enhanced API configuration with admin login support\nconst API_BASE_URL = \"http://localhost:5000/api\";\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  withCredentials: true // If using cookies/sessions\n});\n\n// Enhanced token handling\nexport const getToken = () => {\n  const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\n  return token;\n};\n\n// Improved request interceptor\napi.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error(\"Request Error:\", error);\n  return Promise.reject(error);\n});\n\n// Enhanced response interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    console.warn(\"Session expired - clearing tokens\");\n    localStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"token\");\n  }\n  return Promise.reject(error);\n});\n\n// Enhanced login function with admin support\nexport const loginUser = async (credentials, isAdminLogin = false) => {\n  try {\n    const endpoint = isAdminLogin ? \"/auth/admin-login\" : \"/auth/login\";\n    console.log(\"Attempting login to:\", endpoint);\n    console.log(\"Credentials:\", {\n      ...credentials,\n      password: '***' // Never log actual passwords\n    });\n    const response = await api.post(endpoint, credentials, {\n      validateStatus: status => status < 500 // Don't reject for 4xx errors\n    });\n    if (!response.data.token) {\n      throw new Error(\"Authentication failed: No token received\");\n    }\n\n    // Store token based on rememberMe preference\n    const storage = credentials.rememberMe ? localStorage : sessionStorage;\n    storage.setItem(\"token\", response.data.token);\n    if (response.data.user) {\n      storage.setItem(\"userData\", JSON.stringify(response.data.user));\n    }\n    console.log(\"Login successful\", {\n      token: response.data.token.substring(0, 10) + \"...\",\n      user: response.data.user\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response4, _error$response5, _error$response5$data, _error$response6;\n    console.error(\"Login Error Details:\", {\n      message: error.message,\n      response: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      headers: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.headers\n    });\n    const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 400 ? \"Invalid credentials\" : \"Login failed. Please try again.\");\n    throw new Error(errorMessage);\n  }\n};\n\n// Admin-specific functions\nexport const adminLogin = async adminCredentials => {\n  return loginUser(adminCredentials, true);\n};\nexport const verifyAdminStatus = async () => {\n  try {\n    const response = await api.get(\"/auth/verify-admin\");\n    return response.data.isAdmin;\n  } catch (error) {\n    console.error(\"Admin verification failed:\", error);\n    return false;\n  }\n};\n\n// ... (keep your other existing functions)","map":{"version":3,"names":["API_BASE_URL","api","axios","create","baseURL","headers","withCredentials","getToken","token","localStorage","getItem","sessionStorage","interceptors","request","use","config","Authorization","error","console","Promise","reject","response","_error$response","status","warn","removeItem","loginUser","credentials","isAdminLogin","endpoint","log","password","post","validateStatus","data","Error","storage","rememberMe","setItem","user","JSON","stringify","substring","_error$response2","_error$response3","_error$response4","_error$response5","_error$response5$data","_error$response6","message","errorMessage","adminLogin","adminCredentials","verifyAdminStatus","get","isAdmin"],"sources":["D:/gopika/backup_08_02_2025/online-newspaper-ad-booking/frontend/src/services/api.js"],"sourcesContent":["// Enhanced API configuration with admin login support\r\nconst API_BASE_URL = \"http://localhost:5000/api\";\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n  withCredentials: true // If using cookies/sessions\r\n});\r\n\r\n// Enhanced token handling\r\nexport const getToken = () => {\r\n  const token = localStorage.getItem(\"token\") || sessionStorage.getItem(\"token\");\r\n  return token;\r\n};\r\n\r\n// Improved request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error(\"Request Error:\", error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Enhanced response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      console.warn(\"Session expired - clearing tokens\");\r\n      localStorage.removeItem(\"token\");\r\n      sessionStorage.removeItem(\"token\");\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Enhanced login function with admin support\r\nexport const loginUser = async (credentials, isAdminLogin = false) => {\r\n  try {\r\n    const endpoint = isAdminLogin ? \"/auth/admin-login\" : \"/auth/login\";\r\n    \r\n    console.log(\"Attempting login to:\", endpoint);\r\n    console.log(\"Credentials:\", { \r\n      ...credentials, \r\n      password: '***' // Never log actual passwords\r\n    });\r\n\r\n    const response = await api.post(endpoint, credentials, {\r\n      validateStatus: (status) => status < 500 // Don't reject for 4xx errors\r\n    });\r\n\r\n    if (!response.data.token) {\r\n      throw new Error(\"Authentication failed: No token received\");\r\n    }\r\n\r\n    // Store token based on rememberMe preference\r\n    const storage = credentials.rememberMe ? localStorage : sessionStorage;\r\n    storage.setItem(\"token\", response.data.token);\r\n    \r\n    if (response.data.user) {\r\n      storage.setItem(\"userData\", JSON.stringify(response.data.user));\r\n    }\r\n\r\n    console.log(\"Login successful\", {\r\n      token: response.data.token.substring(0, 10) + \"...\",\r\n      user: response.data.user\r\n    });\r\n\r\n    return response.data;\r\n\r\n  } catch (error) {\r\n    console.error(\"Login Error Details:\", {\r\n      message: error.message,\r\n      response: error.response?.data,\r\n      status: error.response?.status,\r\n      headers: error.response?.headers\r\n    });\r\n    \r\n    const errorMessage = error.response?.data?.message || \r\n                       (error.response?.status === 400 \r\n                         ? \"Invalid credentials\" \r\n                         : \"Login failed. Please try again.\");\r\n    \r\n    throw new Error(errorMessage);\r\n  }\r\n};\r\n\r\n// Admin-specific functions\r\nexport const adminLogin = async (adminCredentials) => {\r\n  return loginUser(adminCredentials, true);\r\n};\r\n\r\nexport const verifyAdminStatus = async () => {\r\n  try {\r\n    const response = await api.get(\"/auth/verify-admin\");\r\n    return response.data.isAdmin;\r\n  } catch (error) {\r\n    console.error(\"Admin verification failed:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// ... (keep your other existing functions)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}